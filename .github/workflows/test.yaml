name: CI Workflow

on: [push, workflow_dispatch]

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure Cmake
        run: |
          git clone https://github.com/catchorg/Catch2.git
          mkdir build
          cd build
          cmake ..
          make Tests
          ./Tests

  build_file_structure:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get file structure
        run: | 
          cp utility/Architecture-template.md Architecture.md
          cp utility/build_repo_structure.sh ./
          ./build_repo_structure.sh Architecture.md
      - name: Push updated version of Architecture
        env:
          TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --local user.name "github-actions"
          git config --local user.email "github-actions@github.com"
          git remote set-url origin https://x-access-token:${TOKEN}@github.com/${{ github.repository }}
                                        
          git add Architecture.md
          git commit --allow-empty -m "Updated Architecture.md" 
          git push origin HEAD:${{ github.ref_name }}

  run_benchmark:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: install our lib
        run: |
          mkdir build
          cd build
          cmake ..
          sudo make install
          cd ..
          rm -rf build

      - name: install google benchmark
        run: |
          git clone https://github.com/google/benchmark.git
          cd benchmark
          cmake -E make_directory "build"
          cmake -E chdir "build" cmake -DBENCHMARK_DOWNLOAD_DEPENDENCIES=on -DCMAKE_BUILD_TYPE=Release ../
          cmake --build "build" --config Release
          sudo cmake --build "build" --config Release --target install
          cd ..

      - name: download jngen
        run: |
          git clone https://github.com/ifsmirnov/jngen.git     

      - name: run bench
        run: |
          g++ src/bench.cpp -std=c++20 -I jngen/ -isystem -lbenchmark -lpthread -o bench
          ./bench --benchmark_format=json > bench_result.json
      
      - name: forming bench report
        run: |
          python3 docs/convert.py bench_result.json docs/bench_report.txt
